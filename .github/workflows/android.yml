name: android-apk
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            coreutils build-essential ccache git zip unzip curl rsync pkg-config \
            openjdk-17-jdk \
            python3 python3-venv python3-pip python3-setuptools python3-distutils \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev \
            libjpeg-dev libfreetype6-dev libbz2-dev liblzma-dev \
            libncurses5 libtinfo5 cmake ninja-build
          java -version
          python3 --version
          pip3 --version

      - name: Cache Buildozer/Gradle
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            $HOME/.gradle/caches
            $HOME/.gradle/wrapper
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: buildozer-${{ runner.os }}-

      - name: Pin Python tooling and Buildozer
        run: |
          python3 -m pip install -U "pip<25.3" "setuptools==69.5.1" "packaging==23.2" wheel "cython>=0.29.36" virtualenv
          python3 -m pip install -U appdirs "colorama>=0.3.3" jinja2 "sh>=1.10,<2.0" build toml
          python3 -m pip install -U buildozer
          buildozer --version

      - name: Install Android SDK/NDK
        run: |
          set -e
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}"
          mkdir -p "$ANDROID_SDK_ROOT"
          # Ensure sdkmanager exists (bootstrap if missing)
          if ! command -v sdkmanager >/dev/null 2>&1; then
            echo "Bootstrapping cmdline-tools..."
            curl -sSL -o /tmp/cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
            unzip -q /tmp/cmdtools.zip -d /tmp/cmdtools
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            mv /tmp/cmdtools/cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "cmdline-tools;latest" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;34.0.0" \
            "ndk;25.2.9519653"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROIDNDK=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"

      - name: Build APK (debug, verbose)
        env:
          BUILDOZER_WARN_ON_ROOT: "1"
        run: |
          set -e
          ls -la
          test -f buildozer.spec
          buildozer -v android debug

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: bin/*.apk

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: |
            .buildozer
            .gradle
          if-no-files-found: ignore
